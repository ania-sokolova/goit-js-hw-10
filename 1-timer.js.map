{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datePicker = document.querySelector(\"#datetime-picker\");\nconst startButton = document.querySelector(\"[data-start]\");\nconst daysSpan = document.querySelector(\"[data-days]\");\nconst hoursSpan = document.querySelector(\"[data-hours]\");\nconst minutesSpan = document.querySelector(\"[data-minutes]\");\nconst secondsSpan = document.querySelector(\"[data-seconds]\");\n\nlet userSelectedDate = null;\nlet timerId = null;\n\nstartButton.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n   onClose(selectedDates) {\n        console.log(\"Selected Date:\", selectedDates[0]);\n        userSelectedDate = selectedDates[0];\n\n    if (userSelectedDate <= new Date()) {\n      iziToast.error({ message: \"Please choose a date in the future\" });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(datePicker, options);\n\nstartButton.addEventListener(\"click\", () => {\n  startButton.disabled = true;\n  datePicker.disabled = true;\n\n  timerId = setInterval(() => {\n    const timeLeft = userSelectedDate - new Date();\n    if (timeLeft <= 0) {\n      clearInterval(timerId);\n      updateTimerUI(0, 0, 0, 0);\n      datePicker.disabled = false;\n      return;\n    }\n    const { days, hours, minutes, seconds } = convertMs(timeLeft);\n    updateTimerUI(days, hours, minutes, seconds);\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  return {\n    days: Math.floor(ms / day),\n    hours: Math.floor((ms % day) / hour),\n    minutes: Math.floor(((ms % day) % hour) / minute),\n    seconds: Math.floor((((ms % day) % hour) % minute) / second),\n  };\n}\n\nfunction updateTimerUI(days, hours, minutes, seconds) {\n  daysSpan.textContent = addLeadingZero(days);\n  hoursSpan.textContent = addLeadingZero(hours);\n  minutesSpan.textContent = addLeadingZero(minutes);\n  secondsSpan.textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, \"0\");\n}\n\n\n"],"names":["datePicker","startButton","daysSpan","hoursSpan","minutesSpan","secondsSpan","userSelectedDate","timerId","options","selectedDates","iziToast","flatpickr","timeLeft","updateTimerUI","days","hours","minutes","seconds","convertMs","ms","addLeadingZero","value"],"mappings":"+IAOA,MAAMA,EAAa,SAAS,cAAc,kBAAkB,EACtDC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3D,IAAIC,EAAmB,KACnBC,EAAU,KAEdN,EAAY,SAAW,GAEvB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAChB,QAAQC,EAAe,CAClB,QAAQ,IAAI,iBAAkBA,EAAc,CAAC,CAAC,EAC9CH,EAAmBG,EAAc,CAAC,EAElCH,GAAoB,IAAI,MAC1BI,EAAS,MAAM,CAAE,QAAS,oCAAsC,CAAA,EAChET,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEAU,EAAUX,EAAYQ,CAAO,EAE7BP,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvBD,EAAW,SAAW,GAEtBO,EAAU,YAAY,IAAM,CAC1B,MAAMK,EAAWN,EAAmB,IAAI,KACxC,GAAIM,GAAY,EAAG,CACjB,cAAcL,CAAO,EACrBM,EAAc,EAAG,EAAG,EAAG,CAAC,EACxBb,EAAW,SAAW,GACtB,MACD,CACD,KAAM,CAAE,KAAAc,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUN,CAAQ,EAC5DC,EAAcC,EAAMC,EAAOC,EAASC,CAAO,CAC5C,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUC,EAAI,CAKrB,MAAO,CACL,KAAM,KAAK,MAAMA,EAAK,KAAG,EACzB,MAAO,KAAK,MAAOA,EAAK,MAAO,IAAI,EACnC,QAAS,KAAK,MAAQA,EAAK,MAAO,KAAQ,GAAM,EAChD,QAAS,KAAK,MAASA,EAAK,MAAO,KAAQ,IAAU,GAAM,CAC/D,CACA,CAEA,SAASN,EAAcC,EAAMC,EAAOC,EAASC,EAAS,CACpDf,EAAS,YAAckB,EAAeN,CAAI,EAC1CX,EAAU,YAAciB,EAAeL,CAAK,EAC5CX,EAAY,YAAcgB,EAAeJ,CAAO,EAChDX,EAAY,YAAce,EAAeH,CAAO,CAClD,CAEA,SAASG,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}